console.log("확인");
/*
실행 컨텍스트와 블록 레벨 스코프
let.const 키워드와 블록 레벨 스코프
var 키워드로 선언한 변수는 오로지 함수의 코드 블록만 지역 스코프로 인정하는 함수
레벨 스코프를 따른다.
하지만 let, const 키워드로 선언한 변수는 모든 코드 블록(함수, if문, for 문, while문 , try/catch 문 등)을 지역 스코프로 인정하는 블록 레벨 스코프를 따른다.*/

// let x = 1;

// if (true) {
//   let x = 10;
//   console.log(x); // 10
// }

// console.log(x); // 1

/*  전역 실행 컨덱스트가 실행되면
블록 렉시컬 환경과 전역 렉시컬 환경이 생성 된다.
if문 블록 스코프 내에 x 값이 10으로 변수 선언과 값 할당이 이루어 지고
실행이 종료가 되면 if문의 코드 블록이 실행되기 이전의 렉시컬 환경으로 되돌려져
전역 변수 x = 1 변수 선언과 값할당이 이루어져 마지막 전역 스코프 실행이 종료될때
x 값이 1로 나오는 것이다.

이는 모든 블록 레벨 스코프를 생성하는 모든 블록문에 적용된다.
*/

/* 
클로저(closure)
클로저는 함수와 그 함수가 선언된 렉시컬 환경과의 조합이다. */

// const x = 1;

// function outerFunc() {
//   const x = 10;

//   // 중첩함수
//   function innerFunc() {
//     console.log(x); // 10
//   }
//   innerFunc();
// }
// outerFunc();

/* outerFunc 함수 내부에서 중첩 함수 innerFunc가 정의되고 호출되었다.
이때 중첩 함수 innerFunc의 상위 스코프는 외부 함수 outerFunc의 스코프다.
따라서 중첩 함수 innerFunc 내부에서 자신을 포함하고 있는 외부 함수 outerFunc의 
x 변수에 접근할 수 있다. 

만약 innerFunc 함수가 outerFunc 함수의 내부에서 정의된 중첩 함수가 아니라면 innerFunc 함수르 outerFunc 함수의 내부에서 호출한다 하더라도 outerFunc 함수의 변수에 접근할 수 없다.*/

// const x = 1;

// function outerFunc() {
//   const x = 10;

//   innerFunc();
// }
// outerFunc();
// // 중첩함수
// function innerFunc() {
//   console.log(x); // 1
// }

// 이 같은 현상이 발생하는 이유는 자바스크립트가 렉시컬 스코프를 따르는 프로그래밍 언어이기 때문이다.

/* 렉시컬 스코프
자바스크립트 엔진은 어디서 호출했는지가 아니라 함수를 어디에 정의했는지에 따라 상위 스코프를 결정한다. 이를 렉시컬 스코프(정적 스코프)라 한다. */

// const x = 1;

// function foo() {
//   const x = 10;
//   bar();
// }
// function bar() {
//   console.log(x);
// }

// foo();
// bar();

/* foo와 bar 함수는 모두 전역에서 정의된 전역 함수이다.
함수의 상위 스코프는 함수를 어디서 정의했는냐에 따라 결정되므로 foo함수와 bar 함수의 상위 스코프는 전역이다.
x 에 할당된 값이 1인 이유

스코프의 실체는 실행 컨텍스트의 렉시컬 환경이다. 
이 렉시컬 환경은 자신의 "외부 렉시컬 환경에 대한 참조"를 통해 상위 렉시컬 환경과 연결된다. 
이것이 바로 스코프 체인이다.

렉시컬 스코프 정의
렉시컬 환경의 "외부 렉시컬 황경에 대한 참조"에 저장할 참조값, 
즉 상위 스코프에 대한 참조는 함수 정의가 평가되는 시점에 함수가 정의된 환경(위치)에 의해 결정된다.

함수 객체는 내부 슬록[[Environment]]에 저장한 렉시컬 환경의 참조, 
즉 상위 스코프를 자신이 존재하는 한 기억한다.*/

// const x = 1;

// function foo() {
//   const x = 10;

//   // 상위 스코프는 함수 정의 환경(위치)에 따라 결정된다.
//   // 함수 호출 위치와 상위 스코프는 아무런 관계가 없다.
//   bar();
// }

// // 함수 bar()는 자신의 상위 스코프, 즉 전역 렉시컬 환경을 [[Environment]]에 저장하여 기억한다.
// function bar() {
//   console.log(x);
// }
// foo();
// bar();

/* 함수 코드 평가는 아래 순서로 진행된다.
1. 함수 실행 컨텍스트 생성
2. 함수 렉시컬 환경 생성
    2.1 함수 환경 레코드 생성
    2.2 this 바인딩 
    2.3 외부 렉시컬 환경에 대한 참조 결정 

이때 함수 렉시컬 환경의 구송 요수인 외부 렉시컬 환경에 대한 참조에는 함수 객체의
내부 슬롯 [[Environment]]에 저장된 렉시컬 환경의 참조가 할당된다.
[[Environment]]에 저장된 렉시컬 환경의 참조는 바로 함수의 상위 스코프를 의미한다.
이것이 바로 함수 정의 위치에 따라 상위 스코프를 결정하는 렉시컬 스코프의 실체다    */

// // 클로저와 렉시컬 환경
// const x = 1;

// // 1)
// function outer() {
//   const x = 10;
//   const inner = function () {
//     console.log(x);
//   }; // 2)
//   return inner;
// }

// // outer 함수를 호출하면 중첩 함수 inner를 반환한다.
// // 그리고 outer 함수의 실행 컨텍스트는 실행 컨테스트 스택에서 팝되어 제거된다.
// const innerFunc = outer(); // 3)
// innerFunc();    // 4) 10

/* 
outer 함수를 호출3)하면 outer 함수는 중첩 함수 inner를 반환하고, 생명 주기(life cycle)를 마감한다.
--> outer 실행 컨텍스트는 실행 컨텍스트 스택에서 제거(pop)되고 이때
outer 함수의 지역변수 x와 변수 값 10을 저장하고 있떤 outer 함수의 실행 컨텍스트가 제거되었으므로 outer 함수의 지역 변수 x 또한 생명 주기를 마감한다.
하지만  4)의 실행결과는 x의 값이 지역변수 할당값인 10이 나온다.
이로써 보면 outer 함수의 실행 컨텍스트는 실행 컨텍스트 스택에서 제거되지만 
outer 함수의 렉시컬 환경까지 소멸하는 것은 아니다.

이처럼 외부 함수보다 중첩 함수가 더 오래 유지되는 경우 중첩함수는 이미 생명 주기가
종료한 외부 함수의 변수를 참조할 수 있다. 이러한 중첩 함수를 클로저(closure)라고 부른다.

outer 함수의 렉시컬 환경은 inner 함수의 [[Environment]] 내부 슬롯에 의해 참조되고 있고 inner 함수는 전역 변수 innerFunc에 의해 참조되고 있으므로 가비지 컬렉션의 대상이 되지 않기에 제거되지 안흔다.
가비지 컬렉터는 누군가가 참조하고 있는 메모리 공간을 함부로 해제하지 않는다.*/

// 이렇게 봤을대 js는 이론적으로 모든 함수는 상위 스코프를 기억하므로 클로저다.
// 하지만 일반적으로 모든 함수를 클로저라고 하지 않는다.

// function foo() {
//   const x = 1;
//   const y = 2;

//   // 일반적으로 클로저라고 하지 않는다.
//   function bar() {
//     const z = 3;

//     debugger;
//     // 상위 스코프의 식별자를 참조하지 않는다.
//     console.log(z);
//   }
//   return bar;
// }

// const bar = foo();
// bar();

/* 중첩 함수 bar는 외부 함수 foo보다 더 오래 유지되지만 상위 스코프의 어떤 식별자도 참조하지 않는다. 참조하지도 않는 식별자를 기억하는 것은 메모리 낭비이기 때문이다. 따라서 bvr함수는 클로저라고 할 수 없다. */
// function foo() {
//   const x = 1;

//   // bar 함수는 ㅋ틀로저였지만 곧바로 소멸한다.
//   // 이러한 함수는 일반적으로 클로저라고 하지않는다.
//   function bar() {
//     debugger;
//     // 상위 식별자를 참조한다.
//     console.log(x);
//   }
//   bar();
// }

// foo();

/*  중첩 함수 bar는 상위 스코프의 식별자를 참조하고 있으므로 클로저다
 하지만 foo함수에 외부로 중첩함수 bar가 반환되지 않는다.
 즉, 외부 함수 foo보다 중첩 함수 bar의 생명 주기가 짧다.
 중첩 합수 var는 클로저였지만
 외부 함수보다 일찍 소멸되기 때문에 생명 주기가 종료된 외부 함수의 식별자를 참조할 수 있다는 클로저의 본질에 부합하지 앟는다.
 따라서 중첩 함수  bar는 일반저긍로 클로저라고 하지 않는다. */

function foo() {
  const x = 1;
  const y = 2;

  // 클로저
  // 중첩 함수 bar는 외부 함수보다 더 오래 유지되며 상위 스코프의 식별자를 참조한다.
  function bar() {
    debugger;
    // 상위 식별자를 참조한다.
    console.log(x);
  }
  return bar;
}
const bar = bar();
foo();

/* 중첩 함수 bar는 상위 스코프의 식별자를 참조하고 있고 외부 함수의 외부로 반환되어 외부 함수보다 더 오래 살아 남는다. 
이러한 중첩 함수를 클로저라고 한다.

다만 클로저인 중첩 함수 bar는 상위스코프의 x, y 식별자 중에서 x만 참조하고 있다.
상위 스코프의 식별자 중에서 클로저가 참조하고 있는 식별자만 기억한다.
클로저에 의해 참조되는 상위 스코프의 변수(foo함수의 x변수)를 
자유 변수라고 부른다.
클로저란 "함수가 자유 변수에 대해 답혀있다."라는 의미다.
즉, 자유 변수에 묶여 있는 함수 --> 클로저

이론적으로 클로저는 상위 스코프를 기억해야 하므로 불필요한 메모리의 점유를 할것 같지만 상위 스코프의 식별자 중에서 기억해야 할 식별자만 기억한다.(x와 y중 closuer로 기억되는 변수는 x만 이다.)

클로저가 왜 필요한지 클로저의 활용은 다음에*/
